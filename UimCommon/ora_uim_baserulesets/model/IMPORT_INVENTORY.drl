package oracle.communications.inventory.rules

/*
This ruleset takes a input file(config.txt) and performs the following on the input file.
    1.  Creates an instance of telephone number if it does not exists in the system. 
    2.  Creates an instance of logical device account if it does not exists in the system. 
    3.  Creates an instance of equipment if it does not exists in the system. 
    4.  Validates and creates a custom involvement between the telephone number and logical device account. 
    5.  Validates and creates a custom involvement between the logical device account and equipment. 

The format of the input file, config.txt, file should be as follows:
TN,LDA,Equipment 
<TelephoneNumber id>,<Logical device account id>,<Equipment id>

Before executing the ruleset the following should be replaced in config.txt file.
<TelephoneNumber id> is the ID (Existing/New) for telephone number.
<Logical device account id> is the ID( Existing/New) for Logical device account.
<Equipment id>  is the ID (Existing/New) for Equipment

Steps to execute the ruleset:
   1.  Create Telephone number, Logical device account & Equipmentspecifications in SCE and 
       install the cartridge into UIM. 
   2.  Modify the hardcoded spec names(SampleEquipmentSpec, SampleLDASpec & SampleTelephoneNumberSpec) 
       in the rule set to the above created spec names. 
   3.  Install the baserulset cartridge into UIM application. 
   4.  Click on the "Import inventory" link in left navigation bar. 
   5.  Select the IMPORT_INVENTORY ruleset and browse for the input file. 
   6.  Click on the proceed.   
   Result: A custom involvement will be created between the supplied Telephone 
           number and Logical device account, Logical device account and equipment. 
*/

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringReader;

import java.util.*;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.transaction.UserTransaction;
import javax.xml.rpc.soap.SOAPFaultException;

import com.opencsv.CSVReader;

import oracle.communications.inventory.api.framework.logging.Log;
import oracle.communications.inventory.extensibility.rules.impl.RuleDebug;
import oracle.communications.inventory.api.entity.*;

import oracle.communications.platform.persistence.PersistenceHelper;
import oracle.communications.platform.persistence.Persistent;
import oracle.communications.inventory.api.common.AttachmentManager;
import oracle.communications.inventory.api.common.CustomInvolvementSearchCriteria;
import oracle.communications.inventory.api.entity.AttachmentType;
import oracle.communications.inventory.api.common.AttachmentSearchCriteria;
import oracle.communications.inventory.api.common.container.ImportInventoryContainer;
import oracle.communications.inventory.api.common.container.ImportInventoryResult;
import oracle.communications.inventory.api.entity.common.Attachment;
import oracle.communications.inventory.api.equipment.EquipmentManager;
import oracle.communications.inventory.api.equipment.EquipmentSearchCriteria;
import oracle.communications.inventory.api.logicaldevice.account.LogicalDeviceAccountManager;
import oracle.communications.inventory.api.logicaldevice.account.LogicalDeviceAccountSearchCriteria;
import oracle.communications.inventory.api.framework.logging.Log;
import oracle.communications.inventory.api.framework.logging.LogFactory;
import oracle.communications.platform.persistence.CriteriaItem;
import oracle.communications.platform.persistence.CriteriaOperator;
import oracle.communications.inventory.api.number.TelephoneNumberManager;
import oracle.communications.inventory.api.number.TelephoneNumberSearchCriteria;
import oracle.communications.inventory.api.number.container.TelephoneNumberData;
import oracle.communications.inventory.api.number.container.TelephoneNumberResult;
import oracle.communications.inventory.api.entity.EquipmentSpecification;
import oracle.communications.platform.persistence.Finder;
import oracle.communications.inventory.api.entity.Specification;
import oracle.communications.inventory.api.entity.common.CustomInvolvement;
import oracle.communications.inventory.api.entity.Equipment;
import oracle.communications.inventory.api.entity.LogicalDeviceAccount;
import oracle.communications.inventory.api.entity.TelephoneNumber;

global Log log;

    function boolean validateAttachment(AttachmentManager am, Persistent from, Persistent to) {
        boolean ok = false;
        if (from == null || to == null) return false;
        CustomInvolvementSearchCriteria criteria = am.makeCustomInvolvementSearchCriteria();
        AttachmentType[] at = new AttachmentType[]{AttachmentType.PRECONFIGURED};
        criteria.setAttachmentType(at);
        criteria.setFromEntity(from);
        criteria.setRange( 0, 1 );
        try {
            List col = am.findCustomInvolvement( criteria );
            ok = col.size() <= 0;
        } catch(Exception e) {
            ok = false;
        }
        if (ok) {
            criteria.setToEntity(to);
            //criteria.setFromEntity(null);
            try {
                Collection col = am.findCustomInvolvement( criteria );
                ok = col.size() <= 0;
            } catch(Exception e) {
                ok = false;
            }
        }
        return ok;
    }

    function Equipment getSIM(String sim, Log log) {
        Equipment returnEquipment = null;
        Equipment equipment =null;
        Finder f=null;
        EquipmentSpecification eqpSpec=null;
        boolean found = false;
        EquipmentManager manager = PersistenceHelper.makeEquipmentManager();
        EquipmentSearchCriteria criteria = manager.makeEquipmentSearchCriteria();
        CriteriaItem id = criteria.makeCriteriaItem();
		id.setName("id");
        id.setValue(sim);
        id.setOperator(CriteriaOperator.EQUALS);
        criteria.setId(id);
        equipment = manager.makeEquipment();
        equipment.setId(sim);
        try {
            Collection<Equipment> equipList = manager.findEquipment(criteria);
            if (equipList != null && !equipList.isEmpty()) {
                found = true;
                returnEquipment = equipList.iterator().next();
                log.debug("",new Object[]{"Found existing equipment="+sim});
            }
        } catch(Exception e) {
            found = false;
        }
        if (!found) {
            UserTransaction ut = null;
            try {
                ut = PersistenceHelper.makePersistenceManager().getTransaction();
                ut.begin();
				f=PersistenceHelper.makeFinder();
                Collection<Specification> specList =(Collection<Specification>) f.findByName(Specification.class, "SampleEquipmentSpec");
                eqpSpec=(EquipmentSpecification)specList.iterator().next();
                equipment.setSpecification(eqpSpec);
                Collection<Equipment> list = new ArrayList<Equipment>();
                list.add(equipment);
                manager.createEquipment(list);
                ut.commit();
                log.debug("",new Object[]{"Created new Equipment="+sim});
                Collection<Equipment> equipList = manager.findEquipment(criteria);
                if (equipList != null && !equipList.isEmpty()) {
                    found = true;
                    returnEquipment = equipList.iterator().next();
                }
            } catch (Throwable t) {
                if (ut != null) {
                    try {
                        found = false;
                        ut.rollback();
                    } catch (Exception e){}
                }
                try {
                    log.exception("", new Exception(), new String[] {"getSIM", t.getLocalizedMessage()});
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            finally {
				if (f!=null){
					f.close();
				}
            }
            if (!found) {
                returnEquipment = null;
            }
        }
        return returnEquipment;
    }

   function TelephoneNumber getTN(String tn, Log log) {
           TelephoneNumber telephoneNumber = null;
           TelephoneNumberData tnData = new TelephoneNumberData();
           String id = tn;
           tnData.setRangeFrom(tn);
           tnData.setTelephoneNumberSpecName("SampleTelephoneNumberSpec");
           TelephoneNumberManager tnMaintainer = PersistenceHelper.makeTelephoneNumberManager();
           List l = new ArrayList();
           TelephoneNumberSearchCriteria tnCriteria = tnMaintainer.makeTelephoneNumberSearchCriteria();
           CriteriaItem rangeFromCi = tnCriteria.makeCriteriaItem();
           rangeFromCi.setName("id");
           rangeFromCi.setOperator(CriteriaOperator.EQUALS);
           rangeFromCi.setValue(id);
           l.add(rangeFromCi);
           tnCriteria.addCriteriaItems(l);
                            
           List entity = null;
           TelephoneNumberManager tnManager=null;
           try {
           			tnManager = PersistenceHelper.makeTelephoneNumberManager();
                    entity=tnManager.findTelephoneNumbers(tnCriteria);
            } catch(Exception e) {
            	e.printStackTrace();
            }
            if(entity != null && entity.size() > 0) {
            		log.debug("",new Object[]{"found existing tn for id = " + id});
                    telephoneNumber = (TelephoneNumber)entity.toArray()[0];
            } else {
            		log.debug("",new Object[]{"creating new tn for id = " + id});
                    TelephoneNumberResult tnResult=null;
            		try {
						  UserTransaction ut = null;
            			  ut = PersistenceHelper.makePersistenceManager().getTransaction();
            			  ut.begin();
                          tnResult = tnManager.createTelephoneNumbers(tnData);
						  ut.commit();
                     } catch (Exception e) {
                              e.printStackTrace();
                     } 
                     if (tnResult != null) {
                        int tnCount = tnResult.getNumberOfCreatedTelephoneNumbers();
                        if (tnCount > 0) {
                            oracle.communications.inventory.api.number.container.TelephoneNumber[] tns = tnResult.getTelephoneNumbers();
                            if (tns!= null) {
                                 try {
                                          entity = tnManager.findTelephoneNumbers(new String[]{tns[0].getUnformattedPhoneNumber()},false);
                                          telephoneNumber = (TelephoneNumber)entity.toArray()[0];                                                 
                                } catch(Exception e) {
                                    log.debug("",new Object[]{"unable to find tn"});
                               }
                               log.debug("",new Object[]{"returned 1 tn!!!"});
                            } else {
                                  log.debug("",new Object[]{"although 1 was created, nothing was returned!!!"});
                            }
                         }
              } else {
                       log.debug("",new Object[]{"the TN result was null!!!"});
              }
           }
      return telephoneNumber;
  }

function LogicalDeviceAccount getPSID(String psid, Log log)  {
    LogicalDeviceAccountManager mgr = PersistenceHelper.makeLogicalDeviceAccountManager();
        LogicalDeviceAccount account = null;
    boolean found = false;
    try {
        LogicalDeviceAccountSearchCriteria criteria = mgr.makeLogicalDeviceAccountSearchCriteria();
        CriteriaItem item = criteria.makeCriteriaItem();    	
        item.setName("id");
        item.setOperator(CriteriaOperator.EQUALS);
        item.setValue(psid);
        criteria.setId(item);
        Collection accounts = mgr.findLogicalDeviceAccounts(criteria);
        if (accounts != null && accounts.size() > 0) { 
            account = (LogicalDeviceAccount)accounts.toArray()[0];
            found = true;
        }
    }
    catch (Throwable t) {
        found = false;
    }
    if (!found) {
        UserTransaction ut = null;
        try {
            List specs = new ArrayList(mgr.getAllLogicalDeviceAccountSpecifications());
            LogicalDeviceAccountSpecification nes = null;	        	
            for(int i=0;i<specs.size();i++) {
                LogicalDeviceAccountSpecification spec = (LogicalDeviceAccountSpecification)specs.get(i);
                if ("SampleLDASpec".equals(spec.getName())) {
                    nes = spec;
                    break;
                }
            }
            ut = PersistenceHelper.makePersistenceManager().getTransaction();
            ut.begin();
            account = mgr.makeLogicalDeviceAccount();
            account.setAdminState(InventoryState.INSTALLED);
            account.setId(psid);
            account.setSpecification(nes);
            List<LogicalDeviceAccount> ldaList = new ArrayList<LogicalDeviceAccount> (1);
            ldaList.add(account);
            List<LogicalDeviceAccount> list = mgr.createLogicalDeviceAccounts(ldaList);
			if(!list.isEmpty()){
				account = list.get(0);
			}
            ut.commit();
        } catch (Throwable t) {
            if (ut != null) {
                try {
                    found = false;
                    ut.rollback();
                } catch (Exception e){}
            }
            log.exception("", new Exception(), new String[] {"getPSID", t.getLocalizedMessage()});
        }
        finally {
        }
    }
    return account;
}


    
function boolean isEmpty(String string) {
    if (string == null || "".equals(string))
        return true;
    return false;
}


  
  function ImportInventoryResult importInventoryAttachment(Object attachment, Log log) {
		int importedCount = 0; 
                   
                   try {
                       List records = null; //r.readAll();
                   BufferedReader checker = new BufferedReader(new StringReader(attachment.toString()));
                       String importSpec = checker.readLine();
                       checker.close();
                       String[] fields = importSpec.split(",");
                       int tnIndex = -1, simIndex = -1, psidIndex = -1;
                       for(int i=0;i<fields.length;i++) {
                           if ("TN".equals(fields[i])) {
                               tnIndex = i;
                           } else if ("EQUIP".equals(fields[i])|| "Equipment".equals(fields[i])) {
                               simIndex = i;
                           } else if ("LDA".equals(fields[i])) {
                               psidIndex = i;
                           }
                       }
                       records = new ArrayList(); 
                       if (fields.length > 1) {
                       
                           // The uploaded file is saved using a charset.  This is usually the default charset of the client that 
                           // creates this file.  This charset must be used to decode the String returned by 
                           // ImportInventoryContainer.getAttachment().  
                           // Use the following to decode the ImportInventoryContainer.getAttachment() String: 
                           //     CSVReader cvs = new CSVReader(new StringReader(new String(container.getAttachment().getBytes(), "<uploaded file charset>"))); 
                           // If charset is GB2312, 
                           //     CSVReader cvs = new CSVReader(new StringReader(new String(container.getAttachment().getBytes(), "GB2312"))); 
                           // If charset is UTF-8, 
                           //     CSVReader cvs = new CSVReader(new StringReader(new String(container.getAttachment().getBytes(), "UTF-8"))); 
                           // So, you must advise user to save file in a pre-defined charset in order to decode the file correctly.
                       CSVReader cvs = new CSVReader(new StringReader(attachment.toString()));

                           records = cvs.readAll();
                       } else {
                       BufferedReader lineReader = new BufferedReader(new StringReader(attachment.toString()));
                           String line = null;
                           while((line = lineReader.readLine()) != null) {
                               records.add(new String[]{line});
                           }
                       }
                               
                       // System.out.println("records.size()=" + records.size());
                       // start at 2nd record, since 1st is format of file
                       for (int r=1;r<records.size();r++) {
                           //System.out.println("record=" + r);
                           String[] record = (String[])records.get(r);
                           if (record == null) continue;
                           // TODO: calls to apis go here
                           String tn = null;
                           if (tnIndex >= 0 && record.length > tnIndex) tn = record[tnIndex];
                           String sim = null;
                           if (simIndex >= 0 && record.length > simIndex) sim = record[simIndex];
                           String psid = null;
                           if (psidIndex >= 0 && record.length > psidIndex) psid = record[psidIndex];
                           if (IsEmpty.isEmpty(tn) && IsEmpty.isEmpty(sim) && IsEmpty.isEmpty(psid))
                               continue;

                           TelephoneNumber telephoneNumber = null;
                           if (tnIndex >= 0) {
                               telephoneNumber = GetTN.getTN(tn,log);
                           }
                           LogicalDeviceAccount account = null;
                           if (psidIndex >= 0) account = GetPSID.getPSID(psid,log);
                           Equipment equipment = null;
                           if (simIndex >= 0) equipment = GetSIM.getSIM(sim,log);
                           importedCount ++;
                           UserTransaction ut = null;
                           Finder f = PersistenceHelper.makeFinder();
                           try {
                               ut = PersistenceHelper.makePersistenceManager().getTransaction();
                               ut.begin();
                               Collection<CustomInvolvementSpecification> customInvolvementSpecs =
			                   f.findByName(CustomInvolvementSpecification.class,
			                                "PreconfigureSpec");
			                   if(customInvolvementSpecs == null || customInvolvementSpecs.size() == 0) {
				                	log.error("custom.involvementSpecificationNotFound","PreconfigureSpec" );
				                	continue;
			                   }	
			                   CustomInvolvementSpecification customInvolvementSpec = customInvolvementSpecs.iterator().next();
                               AttachmentManager am = PersistenceHelper.makeAttachmentManager();
                               boolean tnToPsidAttach = ValidateAttachment.validateAttachment(am,telephoneNumber,account);
                               boolean psidToEquipmentAttach = ValidateAttachment.validateAttachment(am,account,equipment);
                               Collection <CustomInvolvement> list = new ArrayList <CustomInvolvement> (2);
                               if (tnToPsidAttach) {
                                   CustomInvolvement tnToPsid = am.makeCustomInvolvement();
                                   tnToPsid.setAttachmentType(AttachmentType.PRECONFIGURED);
                                   tnToPsid.setFromEntity(telephoneNumber);
                                   tnToPsid.setToEntity(account);
                                   tnToPsid.setSpecification(customInvolvementSpec);
                                   list.add (tnToPsid);
                               }
                               if (psidToEquipmentAttach) {
                                   CustomInvolvement psidToEquipment = am.makeCustomInvolvement();
                                   psidToEquipment.setAttachmentType(AttachmentType.PRECONFIGURED);
                                   psidToEquipment.setFromEntity(account);
                                   psidToEquipment.setToEntity(equipment);
                                   psidToEquipment.setSpecification(customInvolvementSpec);
                                   list.add (psidToEquipment);                                   
                               } 
                               am.createCustomInvolvement(list);
                               if (tnToPsidAttach || psidToEquipmentAttach) {
                                   ut.commit();
                               } else {
                                   ut.rollback();
                               }
                           }
                           catch (Throwable t) {
                               if (ut != null) {
                                   try {
                                       ut.rollback();
                                   } catch (Exception e){e.printStackTrace();}
                               }
                               log.exception("", new Exception(), new String[] {"importInventory", t.getLocalizedMessage()});
                           }
                           finally {
                           }
                           
                           // TODO: validate & make associations
                       }
                   } catch(IOException io) {
                          log.error("",io,new String[]{"Error"});
                   }
                   ImportInventoryResult result = new ImportInventoryResult();
                   result.setImportedCount(importedCount);
                   
                   
                   return result; 
}

function boolean checkFileType(ImportInventoryContainer container,Log log)
{
        String fileName =container.getUploadedFilename();
        if(fileName==null){
            log.error("import.noUpload",new String[] {".txt"} );
            return false;
        }else if(!fileName.contains(".txt")){
        	log.error("import.fileUploadTextType");
        	return false;
        }else if(!(container.getAttachment().length()!=0)){
        	log.error("import.fileUploadDataRequired");
        	return false;
        }
        return true;
}

rule "Import Inventory"
        salience 0
    when
        container: ImportInventoryContainer()
    then
        // System.out.println("spec=" + container.getSpecification());
        // System.out.println("attachment=" + container.getAttachment());
         if(checkFileType(container,log)){
        	ImportInventoryResult result = importInventoryAttachment(container.getAttachment(), log);
        	drools.insert(result);
         }
end
